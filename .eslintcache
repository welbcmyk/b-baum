[{"E:\\DHBW\\5. Semester\\Datenbank Implementierungen\\b-baum\\src\\index.js":"1","E:\\DHBW\\5. Semester\\Datenbank Implementierungen\\b-baum\\src\\App.js":"2","E:\\DHBW\\5. Semester\\Datenbank Implementierungen\\b-baum\\src\\reportWebVitals.js":"3","E:\\DHBW\\5. Semester\\Datenbank Implementierungen\\b-baum\\src\\components\\order-branching-input.component.js":"4","E:\\DHBW\\5. Semester\\Datenbank Implementierungen\\b-baum\\src\\components\\input-options.component.js":"5","E:\\DHBW\\5. Semester\\Datenbank Implementierungen\\b-baum\\src\\components\\next-nodes.components.js":"6","E:\\DHBW\\5. Semester\\Datenbank Implementierungen\\b-baum\\src\\components\\nodes-history.components.js":"7","E:\\DHBW\\5. Semester\\Datenbank Implementierungen\\b-baum\\src\\components\\actions.components.js":"8","E:\\DHBW\\5. Semester\\Datenbank Implementierungen\\b-baum\\src\\helpers\\b-tree.helpers.js":"9","E:\\DHBW\\5. Semester\\Datenbank Implementierungen\\b-baum\\src\\helpers\\b-tree-node.helpers.js":"10"},{"size":589,"mtime":1607458550421,"results":"11","hashOfConfig":"12"},{"size":11407,"mtime":1607979141927,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":1662,"mtime":1607959511216,"results":"15","hashOfConfig":"12"},{"size":8341,"mtime":1607969108284,"results":"16","hashOfConfig":"12"},{"size":801,"mtime":1607952318493,"results":"17","hashOfConfig":"12"},{"size":1213,"mtime":1607958531544,"results":"18","hashOfConfig":"12"},{"size":2469,"mtime":1607972472903,"results":"19","hashOfConfig":"12"},{"size":9357,"mtime":1607972103673,"results":"20","hashOfConfig":"12"},{"size":1285,"mtime":1607912495573,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1lz9mhk",{"filePath":"25","messages":"26","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"45","usedDeprecatedRules":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"E:\\DHBW\\5. Semester\\Datenbank Implementierungen\\b-baum\\src\\index.js",[],["48","49"],"E:\\DHBW\\5. Semester\\Datenbank Implementierungen\\b-baum\\src\\App.js",["50","51","52","53","54","55","56","57","58","59","60","61","62"],"E:\\DHBW\\5. Semester\\Datenbank Implementierungen\\b-baum\\src\\reportWebVitals.js",[],"E:\\DHBW\\5. Semester\\Datenbank Implementierungen\\b-baum\\src\\components\\order-branching-input.component.js",[],"E:\\DHBW\\5. Semester\\Datenbank Implementierungen\\b-baum\\src\\components\\input-options.component.js",["63","64","65","66"],"import { Component } from \"react\";\r\nimport {Navbar, InputGroup, FormControl, Button, Badge} from \"react-bootstrap\";\r\n\r\nfunction ImportFile(props) {\r\n    let fileReader;\r\n\r\n    const handleFileRead = () => {\r\n        const content = fileReader.result;\r\n        props.callback(content);\r\n    };\r\n\r\n    const handleFileChange = (file) => {\r\n        if(file == null || file == undefined) {\r\n            return;\r\n        }\r\n        fileReader = new FileReader();\r\n        fileReader.onloadend = handleFileRead;\r\n        fileReader.readAsText(file);\r\n    };\r\n\r\n    return (\r\n        <InputGroup>\r\n            <FormControl\r\n            type=\"file\"\r\n            onChange={e => handleFileChange(e.target.files[0])}\r\n            accept='.csv'\r\n            id='file'\r\n            />\r\n        </InputGroup>\r\n    )\r\n\r\n}\r\n\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport default class InputOptions extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.onNewNumbersChange = this.onNewNumbersChange.bind(this);\r\n        this.onFileChange = this.onFileChange.bind(this);\r\n        this.onClickAddTextInput = this.onClickAddTextInput.bind(this);\r\n        this.onClickAddFileInput = this.onClickAddFileInput.bind(this);\r\n        this.onClickGenerateAndAdd = this.onClickGenerateAndAdd.bind(this);\r\n        this.onBottomBorderChange = this.onBottomBorderChange.bind(this);\r\n        this.onTopBorderChange = this.onTopBorderChange.bind(this);\r\n        this.onNumOfNodesChange = this.onNumOfNodesChange.bind(this);\r\n\r\n        this.state = {\r\n            newNumbersTextInput: \"\",\r\n            newNumbersFileInput: null,\r\n            numOfNewNumbers: null,\r\n            bottomBorder: null,\r\n            topBorder: null,\r\n            showInvalidComb: false\r\n        };\r\n    }\r\n\r\n    callbackToFileInput = (fileData) => {\r\n        this.setState({\r\n            newNumbersFileInput: fileData\r\n        });\r\n    }\r\n\r\n    onNewNumbersChange(e) {\r\n        this.setState({\r\n            newNumbersTextInput: e.target.value,\r\n        });\r\n    }\r\n\r\n    onClickAddTextInput() {\r\n        if(this.state.newNumbersTextInput == null || this.state.newNumbersTextInput == undefined || this.state.newNumbersTextInput == \"\") {\r\n            return;\r\n        }\r\n        let nextNums = this.state.newNumbersTextInput.split(',').map(function(item) {\r\n            return parseInt(item.trim());\r\n        });\r\n        this.props.getNextNodes(nextNums);\r\n        this.setState({\r\n            newNumbersTextInput: \"\"\r\n        });\r\n    }\r\n\r\n    onClickAddFileInput() {\r\n        if(this.state.newNumbersFileInput == null || this.state.newNumbersFileInput == undefined) {\r\n            return;\r\n        }\r\n        let nextNums = this.state.newNumbersFileInput.split(',').map(function(item) {\r\n            return parseInt(item.trim());\r\n        });\r\n        this.props.getNextNodes(nextNums);\r\n    }\r\n\r\n    onFileChange(e) {\r\n\r\n        this.setState({\r\n            newNumbersFileInput: e.target.value\r\n        });\r\n        console.log(e.target.files[0]);\r\n    }\r\n\r\n    onNumOfNodesChange(e) {\r\n        this.setState({\r\n            numOfNewNumbers: e.target.value,\r\n        });\r\n    }\r\n\r\n    onTopBorderChange(e) {\r\n        this.setState({\r\n            topBorder: e.target.value,\r\n        });\r\n    }\r\n\r\n    onBottomBorderChange(e) {\r\n        this.setState({\r\n            bottomBorder: e.target.value,\r\n        });\r\n    }\r\n\r\n    onClickGenerateAndAdd() {\r\n        if(this.state.numOfNewNumbers > this.state.topBorder - this.state.bottomBorder + 1) {\r\n            this.setState({\r\n                showInvalidComb: true\r\n            })\r\n            return;\r\n        }\r\n        let randNums = [];\r\n        for ( let index = 0; index < this.state.numOfNewNumbers; index++) {\r\n            let randNum;\r\n            do {\r\n                randNum = getRandomInt(this.state.bottomBorder, this.state.topBorder);\r\n            } while(randNums.includes(randNum))\r\n            randNums.push(randNum);\r\n        }\r\n        this.props.getNextNodes(randNums);\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <>\r\n                <Navbar bg=\"light\" expand=\"lg\" class=\"row\">\r\n                    <div class=\"col-5\">\r\n                        <InputGroup>\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text>\r\n                                    New Nodes\r\n                                </InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl\r\n                            value={this.state.newNumbersTextInput}\r\n                            placeholder=\"e.g. 5, 15, 89\"\r\n                            type=\"text\"\r\n                            onChange={this.onNewNumbersChange}\r\n                            />\r\n                            <InputGroup.Append>\r\n                                <Button onClick={this.onClickAddTextInput}>\r\n                                    Add\r\n                                </Button>\r\n                            </InputGroup.Append>\r\n                        </InputGroup>\r\n                    </div> \r\n                    <div class=\"col-7\"></div>\r\n                </Navbar>\r\n                <Navbar bg=\"light\" expand=\"lg\" class=\"row\">\r\n                    <ImportFile class=\"col-2\" content={this.state.newNumbersFileInput} callback={this.callbackToFileInput}/>\r\n                    <Button class=\"col-1\" onClick={this.onClickAddFileInput}>\r\n                        Add\r\n                    </Button>\r\n                    <div class=\"col-9\"></div>\r\n                </Navbar>\r\n                <Navbar bg=\"light\" expand=\"lg\" class=\"row\">\r\n                    <div class =\"col-3\">\r\n                        <InputGroup class =\"col-3\">\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text>\r\n                                    # of Nodes\r\n                                </InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl\r\n                            value={this.state.numOfNewNumbers}\r\n                            placeholder=\"e.g. 5\"\r\n                            type=\"text\"\r\n                            onChange={this.onNumOfNodesChange}\r\n                            />\r\n                        </InputGroup>\r\n                    </div>\r\n                    <div class =\"col-3\">\r\n                        <InputGroup>\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text>\r\n                                    Bottom Border\r\n                                </InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl\r\n                            value={this.state.bottomBorder}\r\n                            placeholder=\"e.g. 3\"\r\n                            type=\"text\"\r\n                            onChange={this.onBottomBorderChange}\r\n                            />\r\n                        </InputGroup>\r\n                    </div>\r\n                    <div class =\"col-3\">\r\n                        <InputGroup>\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text>\r\n                                    Top Border\r\n                                </InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl\r\n                            value={this.state.topBorder}\r\n                            placeholder=\"e.g. 15\"\r\n                            type=\"text\"\r\n                            onChange={this.onTopBorderChange}\r\n                            />\r\n                        </InputGroup>\r\n                    </div>\r\n                    <div class=\"col-2\">\r\n                        <Button variant=\"outline-primary\" onClick={this.onClickGenerateAndAdd}>\r\n                            Generate & Add\r\n                        </Button>\r\n                    </div>\r\n                    <div class=\"col-1\">\r\n                        <Badge hidden={!this.state.showInvalidComb} variant=\"danger\">Invalid Combination</Badge>\r\n                    </div>\r\n                </Navbar>\r\n            </>\r\n        );\r\n    }\r\n}","E:\\DHBW\\5. Semester\\Datenbank Implementierungen\\b-baum\\src\\components\\next-nodes.components.js",["67"],"import React, {Component} from \"react\";\r\nimport {Navbar, Badge} from \"react-bootstrap\";\r\n\r\nexport default class NextNodes extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.nodeList = this.nodeList.bind(this);\r\n    }\r\n    nodeList() {\r\n        if(this.props.nextNodes.length == 0) {\r\n            return [];\r\n        }\r\n        return this.props.nextNodes.map((num, index) => {\r\n            return (\r\n                <Badge pill key={index} variant=\"secondary\">{num}</Badge>\r\n            );\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Navbar bg=\"light\" expand=\"lg\">\r\n                <Badge variant=\"secondary\">Next Nodes</Badge>\r\n                {this.nodeList().length > 0 ? this.nodeList() : <></>}\r\n            </Navbar>\r\n        );\r\n    }\r\n}","E:\\DHBW\\5. Semester\\Datenbank Implementierungen\\b-baum\\src\\components\\nodes-history.components.js",["68"],"import React, {Component} from \"react\";\r\nimport {Navbar, Badge} from \"react-bootstrap\";\r\n\r\nexport default class NodesHistory extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.nodeList = this.nodeList.bind(this);\r\n    }\r\n    nodeList() {\r\n        if(this.props.nodeHistory.length == 0) {\r\n            return [];\r\n        }\r\n        return this.props.nodeHistory.map((num,index) => {\r\n            let type;\r\n            switch(num.type) {\r\n            case \"none\":\r\n                type = \"secondary\";\r\n                break;\r\n            case \"insert\":\r\n                type = \"success\";\r\n                break;\r\n            case \"delete\":\r\n                type = \"danger\";\r\n                break;\r\n            default:\r\n                type=\"secondary\";\r\n                break;\r\n            }\r\n            return (\r\n                <Badge pill key={index} variant={type}>{num.numVal}</Badge>\r\n            );\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Navbar bg=\"light\" expand=\"lg\">\r\n            <Badge variant=\"secondary\">History</Badge>\r\n                {this.nodeList().length > 0 ? this.nodeList() : <></>}\r\n            </Navbar>\r\n        );\r\n    }\r\n}","E:\\DHBW\\5. Semester\\Datenbank Implementierungen\\b-baum\\src\\components\\actions.components.js",["69"],"import React, { Component } from \"react\";\r\nimport {Button, Badge, Navbar, InputGroup, FormControl, ButtonToolbar, ButtonGroup } from \"react-bootstrap\";\r\nimport RangeSlider from \"react-bootstrap-range-slider\";\r\n\r\nexport default class Action extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Navbar>\r\n                <div><Badge variant=\"secondary\">Execute on last Item In Next Nodes</Badge></div>\r\n                <ButtonToolbar>\r\n                    <ButtonGroup className=\"mr-2\"><Button variant=\"outline-success\" onClick={this.props.onClickInsert}>Insert</Button></ButtonGroup>\r\n                    <ButtonGroup className=\"mr-2\"><Button variant=\"outline-danger\" onClick={this.props.onClickDelete}>Delete</Button></ButtonGroup>\r\n                    <ButtonGroup className=\"mr-2\"><Button variant=\"outline-success\" onClick={this.props.onClickInsertAll}>Insert All</Button></ButtonGroup>\r\n                    <ButtonGroup className=\"mr-2\"><Button variant=\"outline-danger\" onClick={this.props.onClickDeleteAll}>Try Delete All</Button></ButtonGroup>\r\n                    <ButtonGroup className=\"mr-2\">\r\n                        <InputGroup>\r\n                            <FormControl \r\n                                value={this.props.searchVal}\r\n                                placeholder=\"e.g. 5\"\r\n                                type=\"text\"\r\n                                onChange={this.props.onSearchChange}/>\r\n                            <InputGroup.Append>\r\n                                <Button variant=\"secondary\" onClick={this.props.onClickSearch}>Search</Button>\r\n                            </InputGroup.Append>\r\n                        </InputGroup>\r\n                    </ButtonGroup>\r\n                    <ButtonGroup className=\"mr-2\"><Button variant=\"outline-secondary\" onClick={this.props.onClickClear}>Clear Next Nodes</Button></ButtonGroup>\r\n                    <b>Separation:</b>\r\n                    <InputGroup className=\"mr-2\">\r\n                        <RangeSlider\r\n                        value={this.props.separationValue}\r\n                        onChange={this.props.setSeparationValue}\r\n                        min={1}\r\n                        max={10}\r\n                        step={1}\r\n                        tooltip=\"off\"\r\n                        />\r\n                    </InputGroup>\r\n                </ButtonToolbar>\r\n            </Navbar>\r\n        )\r\n    }\r\n}","E:\\DHBW\\5. Semester\\Datenbank Implementierungen\\b-baum\\src\\helpers\\b-tree.helpers.js",["70","71","72"],"import { InputGroup, ThemeProvider } from \"react-bootstrap\";\r\nimport BTreeNode from \"./b-tree-node.helpers\";\r\n\r\nexport default class BTree {\r\n    constructor(order) {\r\n        this.order = order;\r\n        this.root = null;\r\n    }\r\n\r\n\r\n    // searches value recursive in the tree and returns the node\r\n    searchVal(node, val, depthObj) {\r\n        console.log(val);\r\n        if(this.root === null) {\r\n            return null;\r\n        }\r\n        depthObj.depth = depthObj.depth + 1;\r\n        if(node.values.includes(val)) {\r\n            return node;\r\n        }\r\n        if(node.isLeaf) {\r\n            // Value not found\r\n            return null;\r\n        }\r\n        let nextSearchNodePos = 0;\r\n        while(nextSearchNodePos <= node.numberOfValues && node.values[nextSearchNodePos] < parseInt(val, 10)) {\r\n            nextSearchNodePos++;\r\n        }\r\n        return this.searchVal(node.children[nextSearchNodePos], val, depthObj);\r\n    }\r\n\r\n    // inserts value into the tree\r\n    insert(val) {\r\n        if(this.root == null) {\r\n            this.root = new BTreeNode(true);\r\n            this.root.addValue(val);\r\n            this.root.BTree = this;\r\n            return;\r\n        }\r\n        const currentNode = this.root;\r\n        if(currentNode.numberOfValues === 2 * this.order - 1) {\r\n            // root is full, this means new node root has to be made by splitting\r\n            const newNode = new BTreeNode(false);\r\n            newNode.tree = this;\r\n            this.root = newNode;\r\n            newNode.addChild(currentNode, 0);\r\n            this.split(currentNode, newNode, 1);\r\n            this.insertIntoNotFullNode(newNode, parseInt(val));\r\n        } else {\r\n            this.insertIntoNotFullNode(currentNode, parseInt(val));\r\n        }\r\n    }\r\n\r\n    // splits child node from parent node into parent.values[pos-1] and parent.values[pos]\r\n    split(child, parent, pos) {\r\n        const newChild = new BTreeNode(child.isLeaf);\r\n        newChild.tree = this.root.tree;\r\n        for (let i = 1; i < this.order; i++) {\r\n            newChild.addValue(child.removeValue(this.order));\r\n        }\r\n        if(!child.isLeaf) {\r\n            for (let i = 1; i <= this.order; i++) {\r\n                newChild.addChild(child.removeChild(this.order), i-1);\r\n            }\r\n        }\r\n        parent.addChild(newChild, pos);\r\n        parent.addValue(child.removeValue(this.order - 1));\r\n        parent.isLeaf = false;\r\n    }\r\n    \r\n    // insert a value into a node that hasn't reached the maximum number of values\r\n    insertIntoNotFullNode(node, val) {\r\n        if(node.values.includes(val)){\r\n            // value already exists\r\n            return;\r\n        }\r\n        if(node.isLeaf) {\r\n            node.addValue(val);\r\n            return;\r\n        }\r\n        let temp = node.numberOfValues;\r\n        while(temp >= 1 && val < node.values[temp - 1]) {\r\n            temp = temp - 1;\r\n        }\r\n        if(node.children[temp].numberOfValues === 2 * this.order - 1) {\r\n            this.split(node.children[temp], node, temp + 1);\r\n            if(val > node.values[temp]) {\r\n                temp++;\r\n            }\r\n        }\r\n        this.insertIntoNotFullNode(node.children[temp], val);\r\n    }\r\n\r\n    // deletes a value in the tree \r\n    delete(val) {\r\n        if(this.root === null) {\r\n            return;\r\n        }\r\n        if(this.root.values.includes(val) && this.root.isLeaf) {\r\n            this.root.removeValue(this.root.values.indexOf(val));\r\n            return true;\r\n        }\r\n        if(this.rootCanSkrinkIntoChildren()) {\r\n            this.merge(this.root.children[1], this.root.children[0]);\r\n            this.root = this.root.children[0];  \r\n        }\r\n        return this.deleteFromNode(this.root, parseInt(val, 10));\r\n    }\r\n\r\n    // deletes a value in a node\r\n    deleteFromNode(node, val) {\r\n        const index = node.values.indexOf(val);\r\n        // check if value is in node\r\n        if(index >= 0) {\r\n            // check if node has enough values with out the deleted one and is a leaf\r\n            if(node.isLeaf && node.numberOfValues > this.order - 1) {\r\n                node.removeValue(node.values.indexOf(val));\r\n                return true;\r\n            }\r\n\r\n            // check if a child could transfer a value\r\n            if(node.children[index].numberOfValues > this.order - 1 || \r\n                node.children[index + 1]. numberOfValues > this.order - 1) {\r\n                //one or both have enough\r\n                if(node.children[index].numberOfValues > this.order - 1) {\r\n                    const leftVal = this.getMaxFromBranch(node.children[index]);\r\n                    node.values[index] = leftVal;\r\n                    return this.deleteFromNode(node.children[index], leftVal);\r\n                }\r\n                const rightVal = this.getMinFromBranch(node.children[index+1]);\r\n                node.values[index] = rightVal;\r\n                return this.deleteFromNode(node.children[index+1], rightVal);\r\n            }\r\n            this.merge(node.children[index + 1], node.children[index]);\r\n            return this.deleteFromNode(node.children[index], val);\r\n        }\r\n        if(node.isLeaf) {\r\n            // val couldn't be found\r\n            return false;\r\n        }\r\n        // value is not in the node\r\n        let indexOfNextNode = 0;\r\n        while (indexOfNextNode < node.numberOfValues && node.values[indexOfNextNode] < val) {\r\n            indexOfNextNode++;\r\n        }\r\n        \r\n        if(node.children[indexOfNextNode].numberOfValues > this.order - 1) {\r\n            return this.deleteFromNode(node.children[indexOfNextNode], val);\r\n        }\r\n\r\n        // child has not enough values and needs to balance or merge\r\n        if ((indexOfNextNode > 0 && node.children[indexOfNextNode - 1].numberOfValues > this.order - 1) ||\r\n        (indexOfNextNode < node.numberOfValues && node.children[indexOfNextNode + 1].numberOfValues > this.order - 1)) {\r\n            if(indexOfNextNode > 0 && node.children[indexOfNextNode - 1].numberOfValues > this.order - 1) {\r\n                this.balance(node.children[indexOfNextNode - 1], node.children[indexOfNextNode]);\r\n            } else {\r\n                this.balance(node.children[indexOfNextNode + 1], node.children[indexOfNextNode]);\r\n            }\r\n            return this.deleteFromNode(node.children[indexOfNextNode], val);\r\n        }\r\n        this.merge(indexOfNextNode > 0 ? node.children[indexOfNextNode - 1] : node.children[indexOfNextNode + 1], node.children[indexOfNextNode]);\r\n        return this.deleteFromNode(indexOfNextNode > 0 ? node.children[indexOfNextNode - 1] : node.children[indexOfNextNode], val);\r\n    }\r\n\r\n    // transfers one value from one node into another node\r\n    balance(origin, target) {\r\n        const indexOrigin = origin.parentNode.children.indexOf(origin);\r\n        const indexTarget = origin.parentNode.children.indexOf(target);\r\n        if (indexOrigin < indexTarget) {\r\n          target.addValue(target.parentNode.removeValue(indexOrigin));\r\n          origin.parentNode.addValue(origin.removeValue(origin.numberOfValues - 1));\r\n          if (!origin.isLeaf) {\r\n            target.addChild(origin.removeChild(origin.children.length - 1), 0);\r\n          }\r\n        } else {\r\n          target.addValue(target.parentNode.removeValue(indexTarget));\r\n          origin.parentNode.addValue(origin.removeValue(0));\r\n          if (!origin.isLeaf) {\r\n            target.addChild(origin.removeChild(0), target.children.length);\r\n          }\r\n        }\r\n    \r\n    }\r\n\r\n    // merges two nodes\r\n    merge(origin, target) {\r\n        const indexOrigin = origin.parentNode.children.indexOf(origin);\r\n        const indexTarget = target.parentNode.children.indexOf(target);\r\n        target.addValue(target.parentNode.removeValue(Math.min(indexOrigin, indexTarget)));\r\n        for (let i = origin.numberOfValues - 1; i >= 0; i--) {\r\n          target.addValue(origin.removeValue(i));\r\n        }\r\n        // Remove reference to origin node\r\n        target.parentNode.removeChild(indexOrigin);\r\n        // Transfer all the children from origin node to target\r\n        if (!origin.isLeaf) {\r\n          while (origin.children.length) {\r\n            if(indexOrigin > indexTarget) {\r\n                target.addChild(origin.removeChild(0), target.children.length) \r\n            } else {\r\n                target.addChild(origin.removeChild(origin.children.length-1), 0);\r\n            }\r\n          }\r\n        }\r\n    }\r\n\r\n    rootCanSkrinkIntoChildren() {\r\n        const hasOneElement = this.root.numberOfValues === 1;\r\n        const isNotLeaf = !this.root.isLeaf;\r\n        const leftChildHasMinNumOfVals = this.root.children[0].numberOfValues === this.order-1;\r\n        const rightChildHasMinNumOfVals = this.root.children[1].numberOfValues === this.order -1;\r\n        return hasOneElement && isNotLeaf && leftChildHasMinNumOfVals && rightChildHasMinNumOfVals;\r\n    }\r\n\r\n    getMinFromBranch(node) {\r\n        while(!node.isLeaf) {\r\n            node = node.children[0];\r\n        }\r\n        return node.values[0];\r\n    }\r\n\r\n    getMaxFromBranch(node) {\r\n        while(!node.isLeaf) {\r\n            node = node.children[node.numberOfValues];\r\n        }\r\n        return node.values[node.numberOfValues - 1];\r\n    }\r\n\r\n    toJSON() {\r\n        if(this.root === null) {\r\n            return {};\r\n        }\r\n        return this.root.toJSON();\r\n    }\r\n}","E:\\DHBW\\5. Semester\\Datenbank Implementierungen\\b-baum\\src\\helpers\\b-tree-node.helpers.js",[],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":91,"column":14,"nodeType":"79","messageId":"80","endLine":91,"endColumn":16},{"ruleId":"81","severity":1,"message":"82","line":91,"column":20,"nodeType":"83","messageId":"84","endLine":91,"endColumn":22},{"ruleId":"81","severity":1,"message":"82","line":91,"column":37,"nodeType":"83","messageId":"84","endLine":91,"endColumn":39},{"ruleId":"77","severity":1,"message":"78","line":91,"column":46,"nodeType":"79","messageId":"80","endLine":91,"endColumn":48},{"ruleId":"77","severity":1,"message":"78","line":216,"column":42,"nodeType":"79","messageId":"80","endLine":216,"endColumn":44},{"ruleId":"77","severity":1,"message":"78","line":217,"column":45,"nodeType":"79","messageId":"80","endLine":217,"endColumn":47},{"ruleId":"77","severity":1,"message":"78","line":218,"column":42,"nodeType":"79","messageId":"80","endLine":218,"endColumn":44},{"ruleId":"77","severity":1,"message":"78","line":218,"column":85,"nodeType":"79","messageId":"80","endLine":218,"endColumn":87},{"ruleId":"77","severity":1,"message":"78","line":251,"column":36,"nodeType":"79","messageId":"80","endLine":251,"endColumn":38},{"ruleId":"85","severity":1,"message":"86","line":353,"column":1,"nodeType":"87","messageId":"80","endLine":374,"endColumn":2},{"ruleId":"77","severity":1,"message":"88","line":359,"column":21,"nodeType":"79","messageId":"80","endLine":359,"endColumn":23},{"ruleId":"77","severity":1,"message":"88","line":369,"column":26,"nodeType":"79","messageId":"80","endLine":369,"endColumn":28},{"ruleId":"85","severity":1,"message":"86","line":376,"column":1,"nodeType":"89","messageId":"80","endLine":376,"endColumn":70},{"ruleId":"77","severity":1,"message":"78","line":13,"column":33,"nodeType":"79","messageId":"80","endLine":13,"endColumn":35},{"ruleId":"77","severity":1,"message":"78","line":76,"column":85,"nodeType":"79","messageId":"80","endLine":76,"endColumn":87},{"ruleId":"77","severity":1,"message":"78","line":76,"column":132,"nodeType":"79","messageId":"80","endLine":76,"endColumn":134},{"ruleId":"77","severity":1,"message":"78","line":89,"column":85,"nodeType":"79","messageId":"80","endLine":89,"endColumn":87},{"ruleId":"77","severity":1,"message":"78","line":10,"column":40,"nodeType":"79","messageId":"80","endLine":10,"endColumn":42},{"ruleId":"77","severity":1,"message":"78","line":10,"column":42,"nodeType":"79","messageId":"80","endLine":10,"endColumn":44},{"ruleId":"90","severity":1,"message":"91","line":6,"column":5,"nodeType":"92","messageId":"93","endLine":8,"endColumn":6},{"ruleId":"94","severity":1,"message":"95","line":1,"column":10,"nodeType":"96","messageId":"97","endLine":1,"endColumn":20},{"ruleId":"94","severity":1,"message":"98","line":1,"column":22,"nodeType":"96","messageId":"97","endLine":1,"endColumn":35},{"ruleId":"99","severity":1,"message":"100","line":123,"column":17,"nodeType":"101","messageId":"102","endLine":123,"endColumn":57,"fix":"103"},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","no-extend-native","Array prototype is read only, properties should not be added.","AssignmentExpression","Expected '!==' and instead saw '!='.","CallExpression","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'InputGroup' is defined but never used.","Identifier","unusedVar","'ThemeProvider' is defined but never used.","no-whitespace-before-property","Unexpected whitespace before property numberOfValues.","MemberExpression","unexpectedWhitespace",{"range":"106","text":"107"},"no-global-assign","no-unsafe-negation",[4358,4360],"."]